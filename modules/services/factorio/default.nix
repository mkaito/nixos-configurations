{
  config,
  lib,
  pkgs,
  ...
}:
with lib; let
  cfg = config.services.factorio;
  factorio = pkgs.callPackage ./../../../pkgs/factorio/default.nix {releaseType = "headless";};
  name = "Factorio";
  stateDir = cfg.stateDir;
  mkSavePath = name: "${stateDir}/saves/${name}.zip";
  configFile = pkgs.writeText "factorio.conf" ''
    use-system-read-write-data-directories=true
    [path]
    read-data=${factorio}/share/factorio/data
    write-data=${stateDir}
  '';
  serverSettings =
    {
      name = cfg.game-name;
      description = cfg.description;
      visibility = {
        public = cfg.public;
        lan = cfg.lan;
      };
      username = cfg.username;
      password = cfg.password;
      token = cfg.token;
      game_password = cfg.game-password;
      require_user_verification = cfg.requireUserVerification;
      max_upload_in_kilobytes_per_second = 0;
      minimum_latency_in_ticks = 0;
      ignore_player_limit_for_returning_players = false;
      allow_commands = "admins-only";
      autosave_interval = cfg.autosave-interval;
      autosave_slots = 5;
      afk_autokick_interval = 0;
      auto_pause = true;
      only_admins_can_pause_the_game = true;
      autosave_only_on_server = true;
      admins = [];
    }
    // cfg.extraSettings;
  serverSettingsFile = pkgs.writeText "server-settings.json" (builtins.toJSON (filterAttrsRecursive (n: v: v != null) serverSettings));
  whitelistFile = pkgs.writeText "server-whitelist.json" (builtins.toJSON cfg.whitelist);
  modDir = pkgs.factorio-utils.mkModDirDrv cfg.mods;

  ## Run rsync daemon with this module config
  #  A few notes:
  #  * Rsync runs as the `factorio` user
  #  * We can't chroot because we're not root
  #  * We can't set gid, uid, because we're not root, but we don't need to
  #    either.
  factorioRsyncdConf = pkgs.writeText "rsyncd-factorio.conf" ''
    log file = ${config.services.factorio.stateDir}/rsync.log
    [mods]
      use chroot = false
      comment = Factorio mods folder
      path = /var/lib/factorio/mods
      read only = false
    [saves]
      use chroot = false
      comment = Factorio saves folder
      path = /var/lib/factorio/saves
      read only = false
  '';

  ## Prepend this forced command to all SSH keys
  #  * We force execution of the rsync daemon with the config above
  #  * We prevent any options that might result in unwanted access
  #  * Needs to be one line, sorry.
  factorioRsyncCmd = ''command="rsync --config=${factorioRsyncdConf} --server --daemon .",no-agent-forwarding,no-port-forwarding,no-user-rc,no-X11-forwarding,no-pty'';
  modzip = "/tmp/mods.zip";
in {
  disabledModules = ["services/games/factorio.nix"];
  options = {
    services.factorio = {
      enable = mkEnableOption name;
      autoStart = mkOption {
        type = types.bool;
        default = true;
        description = ''
          Start the factorio service on boot
        '';
      };
      port = mkOption {
        type = types.int;
        default = 34197;
        description = ''
          The port to which the service should bind.

          This option will also open up the UDP port in the firewall configuration.
        '';
      };
      saveName = mkOption {
        type = types.str;
        default = "default";
        description = ''
          The name of the savegame that will be used by the server.

          When not present in ${stateDir}/saves, a new map with default
          settings will be generated before starting the service.
        '';
      };
      # TODO Add more individual settings as nixos-options?
      # TODO XXX The server tries to copy a newly created config file over the old one
      #   on shutdown, but fails, because it's in the nix store. When is this needed?
      #   Can an admin set options in-game and expect to have them persisted?
      configFile = mkOption {
        type = types.path;
        default = configFile;
        defaultText = "configFile";
        description = ''
          The server's configuration file.

          The default file generated by this module contains lines essential to
          the server's operation. Use its contents as a basis for any
          customizations.
        '';
      };
      extraSettings = mkOption {
        type = types.attrs;
        default = {};
        example = {admins = ["username"];};
        description = ''
          Extra game configuration that will go into server-settings.json
        '';
      };
      stateDir = mkOption {
        type = types.path;
        default = "/var/lib/factorio";
        description = ''
          The server's data directory.

          The configuration and map will be stored here.
        '';
      };
      mods = mkOption {
        type = types.bool;
        default = true;
        description = ''
          Enable manual mod management. This will put the mods folder in the
          stateDir for you to handle manually, for example via rsync.
        '';
      };
      game-name = mkOption {
        type = types.nullOr types.string;
        default = "Factorio Game";
        description = ''
          Name of the game as it will appear in the game listing.
        '';
      };
      description = mkOption {
        type = types.nullOr types.string;
        default = "";
        description = ''
          Description of the game that will appear in the listing.
        '';
      };
      public = mkOption {
        type = types.bool;
        default = false;
        description = ''
          Game will be published on the official Factorio matching server.
        '';
      };
      lan = mkOption {
        type = types.bool;
        default = false;
        description = ''
          Game will be broadcast on LAN.
        '';
      };
      username = mkOption {
        type = types.nullOr types.string;
        default = null;
        description = ''
          Your factorio.com login credentials. Required for games with visibility public.
        '';
      };
      password = mkOption {
        type = types.nullOr types.string;
        default = null;
        description = ''
          Your factorio.com login credentials. Required for games with visibility public.
        '';
      };
      token = mkOption {
        type = types.nullOr types.string;
        default = null;
        description = ''
          Authentication token. May be used instead of 'password' above.
        '';
      };
      game-password = mkOption {
        type = types.nullOr types.string;
        default = null;
        description = ''
          Game password.
        '';
      };
      rsync = mkOption {
        type = types.bool;
        default = false;
        description = ''
          Enable rsync-over-ssh access on the factorio user.

          Configures two rsync modules: mods and saves.
        '';
      };
      rsyncKeys = mkOption {
        type = types.listOf types.string;
        default = [];
        description = ''
          A list of SSH keys that should have access to rsync-over-ssh on the factorio user.
        '';
      };
      requireUserVerification = mkOption {
        type = types.bool;
        default = true;
        description = ''
          When set to true, the server will only allow clients that have a valid factorio.com account.
        '';
      };
      whitelist = mkOption {
        type = types.listOf types.string;
        default = [];
        description = ''
          When set, requireUserVerification must also be true.

          List usernames that are allowed to log into the server.
        '';
      };
      autosave-interval = mkOption {
        type = types.nullOr types.int;
        default = null;
        example = 10;
        description = ''
          Autosave interval in minutes.
        '';
      };
    };
  };

  config = mkIf cfg.enable {
    assertions = [
      {
        assertion = !(cfg.rsync && cfg.rsyncKeys == []);
        message = "Please define rsyncKeys if you use rsync for factorio.";
      }
      {
        assertion = !(cfg.requireUserVerification && cfg.whitelist == []);
        message = "Please enable requireUserVerification if you use whitelist";
      }
    ];

    users = {
      users.nginx.extraGroups = ["factorio"];
      users.factorio =
        {
          uid = 241;
          description = "Factorio server user";
          group = "factorio";
          home = stateDir;
          createHome = true;
        }
        // (optionalAttrs cfg.rsync {
          shell = pkgs.bash;
          openssh.authorizedKeys.keys = map (x: factorioRsyncCmd + " " + x) cfg.rsyncKeys;
        });

      groups.factorio = {
        gid = 241;
      };
    };

    services.nginx = {
      enable = true;
      virtualHosts.factorio = {
        serverName = "factorio.adalint.net";
        locations."=/mods.zip" = {
          alias = "/var/lib/factorio/mods.zip";
        };
      };
    };

    systemd.services.factorio = {
      description = "Factorio headless server";
      wantedBy = mkIf cfg.autoStart ["multi-user.target"];
      after = ["network.target"];
      path = [pkgs.zip];

      preStart = lib.concatStringsSep "\n" [
        (toString [
          "test -e ${stateDir}/saves/${cfg.saveName}.zip"
          "||"
          "${factorio}/bin/factorio"
          "--config=${cfg.configFile}"
          "--create=${mkSavePath cfg.saveName}"
          "--server-banlist=${stateDir}/banlist.json"
          (optionalString (cfg.mods) "--mod-directory=${stateDir}/mods")
          (optionalString (cfg.whitelist != []) "--server-whitelist=${whitelistFile}")
        ])
        ''
          # cd /var/lib/factorio/mods
          # rm -f ../mods.zip
          # zip -r9 ../mods.zip *
          # chmod g+r ../mods.zip
        ''
      ];

      serviceConfig = {
        User = "factorio";
        Group = "factorio";
        Restart = "always";
        KillSignal = "SIGINT";
        WorkingDirectory = stateDir;
        PrivateTmp = true;
        UMask = "0007";
        ExecStart = toString [
          "${factorio}/bin/factorio"
          "--config=${cfg.configFile}"
          "--port=${toString cfg.port}"
          "--start-server=${mkSavePath cfg.saveName}"
          "--server-settings=${serverSettingsFile}"
          "--server-banlist=${stateDir}/banlist.json"
          (optionalString (cfg.mods) "--mod-directory=${stateDir}/mods")
          (optionalString (cfg.whitelist != []) "--server-whitelist=${whitelistFile}")
          (optionalString (cfg.whitelist != []) "--use-server-whitelist")
        ];
      };
    };

    networking.firewall.allowedUDPPorts = [cfg.port];
    networking.firewall.allowedTCPPorts =
      [80]
      ++ (
        if cfg.rsync
        then [873]
        else []
      );

    system.activationScripts.factorio = ''
      mkdir -p ${stateDir}/{mods,saves}
      chown -R factorio:factorio ${stateDir}
      chmod g+rx /var/lib/factorio
    '';
  };
}
